{"version":3,"sources":["Components/WeatherInfo.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","data","city","country","tempF","humidity","desc","sunrise","sunset","icon","timeDiff","Fragment","className","moment","utc","add","format","src","Weather","apiKey","process","useState","searchQuery","setSearchQuery","default","error","temp","dataList","weatherData","setWeatherData","kelvinToCelsius","kelvin","toFixed","timezoneAdjust","unix","Date","toUTCString","placeholder","onChange","e","target","value","class","onClick","fetch","then","response","status","json","name","sys","main","tempC","weather","description","timezone","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSA2CeA,MAvCf,SAAqBC,GAAQ,IAAD,EACyDA,EAAMC,KAA/EC,EADgB,EAChBA,KAAMC,EADU,EACVA,QAASC,EADC,EACDA,MAAOC,EADN,EACMA,SAAUC,EADhB,EACgBA,KAAMC,EADtB,EACsBA,QAASC,EAD/B,EAC+BA,OAAQC,EADvC,EACuCA,KAAMC,EAD7C,EAC6CA,SAUrE,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,gBAAf,eATGC,IAAOC,MAAMC,IAAIL,EAAU,KAAKM,OAAO,MAWxC,yBAAKC,IAAG,2CAAsCR,EAAtC,aACPH,GAEH,yBAAKM,UAAU,sBACX,yBAAKA,UAAU,kBACX,yCACA,4CACA,yCACA,wCACA,wCAEJ,yBAAKA,UAAU,kBACX,2BAAIV,EAAJ,KAAYC,GACZ,2BAAIC,EAAJ,UACA,2BAAIC,EAAJ,KACA,2BAAIE,GACJ,2BAAIC,OC4DTU,MA1Ff,WACI,IAAMC,EAASC,mCADA,EAEuBC,mBAAS,IAFhC,mBAERC,EAFQ,KAEKC,EAFL,OAGuBF,mBAAS,CAC3CG,QAAS,yBACTC,MAAO,KACPvB,KAAM,KACNC,QAAS,KACTuB,KAAM,KACNrB,SAAU,KACVC,KAAM,KACNC,QAAS,KACTC,OAAQ,KACRE,SAAU,KACVD,KAAM,KACNkB,SAAU,OAfC,mBAGRC,EAHQ,KAGKC,EAHL,KAqDf,SAASC,EAAgBC,GACrB,OAAQA,EAAS,QAAQC,QAAQ,GAGrC,SAASC,EAAeC,EAAMxB,GAC1B,OAAOG,IAAOC,IAAI,IAAIqB,KAAY,IAAPD,EAA0B,IAAXxB,GAAkB0B,eAAepB,OAAO,MAetF,OACI,yBAAKJ,UAAU,qBACX,yBAAKA,UAAU,kBACX,2BACAA,UAAU,eACVyB,YAAY,oCACZC,SA7DZ,SAA2BC,GACvBhB,EAAegB,EAAEC,OAAOC,UA8DhB,uBAAGC,MAAM,gBAAgBC,QA3DrC,WACIC,MAAM,qDAAD,OAAsDtB,EAAtD,kBAA2EH,IAC/E0B,MAAK,SAAAC,GACsB,MAApBA,EAASC,OACTD,EAASE,OACRH,MAAK,SAAA5C,GAAI,OAAI4B,EAAe,CACzB3B,KAAMD,EAAKgD,KACX9C,QAASF,EAAKiD,IAAI/C,QAClBC,OAmBY2B,EAnBc9B,EAAKkD,KAAKzB,MAoBxC,KAACK,EAAS,QAAwB,IAAIC,QAAQ,IAnB1CoB,MAAOtB,EAAgB7B,EAAKkD,KAAKzB,MACjCrB,SAAUJ,EAAKkD,KAAK9C,SACpBC,KAAML,EAAKoD,QAAQ,GAAGC,YACtB5C,SAAUT,EAAKsD,SACf9C,KAAMR,EAAKoD,QAAQ,GAAG5C,KACtBF,QAAS0B,EAAehC,EAAKiD,IAAI3C,QAASN,EAAKsD,UAC/C/C,OAAQyB,EAAehC,EAAKiD,IAAI1C,OAAQP,EAAKsD,UAC7C9B,MAAO,OAWvB,IAA4BM,KAPhBF,EAAe,CACXJ,MAAO,4CAwCf,yBAAKb,UAAU,gBArBM,MAArBgB,EAAYH,MACLG,EAAYH,MAEM,MAApBG,EAAY1B,KACV0B,EAAYJ,QAEM,MAApBI,EAAY1B,KACV,kBAAC,EAAD,CAAaD,KAAM2B,SADzB,KC5DE4B,MATf,WAEE,OACE,yBAAK5C,UAAU,iBACb,kBAAC,EAAD,QCIc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.2e6a5243.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport '../App.css';\n\nfunction WeatherInfo(props) {\n    const { city, country, tempF, humidity, desc, sunrise, sunset, icon, timeDiff} = props.data;\n\n    function getLocalTime() {\n        return moment.utc().add(timeDiff, 's').format(\"LT\")\n    }\n\n    // setInterval(() => {\n    //     getLocalTime()\n    //   }, 1000);\n\n    return(\n        <React.Fragment>\n            <div className=\"weather-desc\">\n              Local time: {getLocalTime()}\n              <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n              {desc}\n            </div>\n            <div className=\"weather-info-inner\">\n                <div className=\"weather-labels\">\n                    <p>Location: </p>\n                    <p>Temperature: </p>\n                    <p>Humidity: </p>\n                    <p>Sunrise: </p>\n                    <p>Sunset: </p>\n                </div>\n                <div className=\"weather-values\">\n                    <p>{city}, {country}</p>\n                    <p>{tempF} &deg;F</p>\n                    <p>{humidity}%</p>\n                    <p>{sunrise}</p>\n                    <p>{sunset}</p>\n                </div>\n            </div>\n        </React.Fragment> \n\n    )\n}\n\nexport default WeatherInfo;","import React, { useState } from 'react';\nimport WeatherInfo from './WeatherInfo';\nimport moment from 'moment';\n\n\nfunction Weather() {\n    const apiKey = process.env.REACT_APP_OWM_API_KEY;\n    const [searchQuery, setSearchQuery] = useState('');\n    const [weatherData, setWeatherData] = useState({\n        default: 'No weather to display.',\n        error: null,\n        city: null,\n        country: null,\n        temp: null,\n        humidity: null,\n        desc: null,\n        sunrise: null,\n        sunset: null,\n        timeDiff: null,\n        icon: null,\n        dataList: null,\n    });\n\n    function updateSearchQuery(e) {\n        setSearchQuery(e.target.value)\n    }\n\n    function getWeather() {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchQuery}&appid=${apiKey}`)\n        .then(response => {\n            if (response.status === 200) {\n                response.json()\n                .then(data => setWeatherData({\n                    city: data.name,\n                    country: data.sys.country,\n                    tempF: kelvinToFahrenheit(data.main.temp),\n                    tempC: kelvinToCelsius(data.main.temp),\n                    humidity: data.main.humidity,\n                    desc: data.weather[0].description,\n                    timeDiff: data.timezone,\n                    icon: data.weather[0].icon,\n                    sunrise: timezoneAdjust(data.sys.sunrise, data.timezone),\n                    sunset: timezoneAdjust(data.sys.sunset, data.timezone),\n                    error: null,\n                }))\n            }\n            else {\n                setWeatherData({\n                    error: 'Invalid entry, please try again.'\n                })\n            }\n        })\n    }\n\n    function kelvinToFahrenheit(kelvin) {\n        return ((kelvin - 273.15) * (9.0 / 5.0) + 32).toFixed(0);\n    }\n\n    function kelvinToCelsius(kelvin) {\n        return (kelvin - 273.15).toFixed(0);\n    }\n\n    function timezoneAdjust(unix, timeDiff) {\n        return moment.utc(new Date(unix * 1000 + (timeDiff * 1000)).toUTCString()).format(\"LT\")\n    }\n\n    function statusMessage() {\n        if (weatherData.error != null) {\n            return weatherData.error\n        }\n        else if (weatherData.city == null) {\n            return weatherData.default\n        } \n        else if (weatherData.city != null) {\n            return <WeatherInfo data={weatherData}/>\n        }\n    }\n\n    return(\n        <div className=\"weather-container\">\n            <div className=\"weather-header\">\n                <input \n                className=\"search-input\"\n                placeholder=\"Enter City (e.g. Los Angeles, US)\"\n                onChange={updateSearchQuery}\n                />\n                <i class=\"fas fa-search\" onClick={getWeather}></i>\n            </div>\n            <div className=\"weather-info\">\n                {statusMessage()}\n            </div>\n        </div>\n    )\n}\n\nexport default Weather;","import React from 'react';\nimport './scss/main.css'\nimport Weather from './Components/Weather'\n\nfunction App() {\n  \n  return(\n    <div className=\"app-container\">\n      <Weather/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}